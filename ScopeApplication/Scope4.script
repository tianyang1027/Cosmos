USING Microsoft.WrapStar.Shared REFERENCE "/local/WrapStar/Distrib/Microsoft.WrapStar.Shared.dll";

#DECLARE date string = "2012_03_07";

// Adjust the stream locations as appropriate.
#DECLARE inputStream string = string.Format(@"J:/Scope/local/WrapStar/Prod/{0}.dat", @date);
#DECLARE outputStream string = string.Format(@"/my/WrapStar/{0}.dat", @date);

//
// WrapStarJsonOutput: original Json output blob for all models
//    When selected, only [DocumentURL, Timestamp, WrapStarJsonOutput, 
//    HttpReturnCode, Version] are extracted and the extractor will skip model unrolling
//    Fastest mode at about 23 MBps to filter out unneccesary extractions.
//    To continue parsing, call WrapStarJsonParser.ParseJsonV2(WrapStarJsonOutput)
//    like WrapStarJsonParser.Parse
//
// Model_Json: original Json output blob for each model [default] 
//    Throughput at about 18 MBps. Recommended to filtering by Model_ID and Ontology.
//
// Model_Extraction: extracted Json output for the model
//    Kif schema removed and all attributes flatted. 
//    Throughput at about 13 MBps. Better avoid this in extractor directly unless 
//    flattening is required on all inputs. Instead filter out to specified target 
//    and then call WrapStarJsonParser.FlattenWrapStarJsonV2(Model_Json) to obtain 
//    flatted results.
//
ModelData =
EXTRACT
    DocumentURL,
    HttpReturnCode,
//    Timestamp,
//    WrapStarJsonOutput,
//    Error,
    ModelCount,
    Model_ID,
    Model_Version,
    Model_Ontology,
    Model_Latest,
    Model_Timestamp,
//    Model_Extraction
    Model_Json

FROM
    @inputStream

// The following flags are accepted by the WrapStar extractor:
// WrapStarExtractor("showError"): 
//    Includes invalid Json records and outputs the error message to the Error column.

USING
    WrapStarExtractor()

HAVING
    Model_Ontology == "Business"

WITH
    SAMPLE 10 PERCENT;

ExtractedAttribute = 
PROCESS
    ModelData

USING
    WrapStarProcessor

PRODUCE
    DocumentURL,
    Model_ID,
    Latitude,
    Longitude
;

OUTPUT
TO
    @outputStream
;
#CS
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using ScopeRuntime;
using Microsoft.WrapStar.Shared;

// processor to further handle WrapStar output and return particular attributes
public class WrapStarProcessor : Processor
{
    public override Schema Produces(string[] columns, string[] args, Schema input)
    {
        return new Schema("DocumentURL, Model_ID, Latitude, Longitude");
    }

    private static int GetColumnIndex(Schema schema, string name)
    {
        return schema.Contains(name) ? schema.IndexOf(name) : -1;
    }
    public override IEnumerable<Row> Process(RowSet input, Row output, string[] args)
    {
        // weird schema.IndexOf throw exceptions on non-existing columns
        int idxExtraction = GetColumnIndex(input.Schema, "Model_Extraction");
        int idxModelJson = GetColumnIndex(input.Schema, "Model_Json");
        int idxJsonOutput = GetColumnIndex(input.Schema, "WrapStarJsonOutput");

        foreach (Row row in input.Rows)
        {
            Dictionary<string, string> attributes = null;
            if (idxExtraction >= 0)
            {
                // flatten extraction available
                string extraction = row[idxExtraction].String;
                attributes = WrapStarJsonParser.DeserializeJsonData(extraction);

            }
            else if (idxModelJson >= 0)
            {
                // need to flatten model json before doing lookup
                string modelJson = row[idxModelJson].String;
                attributes = new Dictionary<string, string>();
                JsonParser jp = new JsonParser(modelJson);
                WrapStarJsonParser.SerializeWrapStarDataV2(jp.Root, attributes, null, modelJson);

                // alternatively, can use these two commented lines
                // but it will require additional serialization and deserialization steps
                //string extraction = WrapStarJsonParser.FlattenWrapStarJsonV2(json);
                //attributes = WrapStarJsonParser.DeserializeJsonData(extraction);
            }
            else if (idxJsonOutput >= 0)
            {
                // now handle full JSON blob. refer to sample code of WrapStarExtractor below
                // invoke ParseJson to remove Kif schema and unroll multiple models
                // by default, the extraction output at level 1 (just model json without flattening)
                string wrapstarJson = row[idxJsonOutput].String;
                foreach (Dictionary<string, string> extraction in WrapStarJsonParser.ParseJsonV2(wrapstarJson))
                {
                    // zoom-in to business models
                    if (extraction["Model_Ontology"] == "Business")
                    {
                        // now parse json and flatten it out
                        attributes = new Dictionary<string, string>();
                        string modelJson = extraction["Model_Json"];
                        JsonParser jp = new JsonParser(modelJson);
                        WrapStarJsonParser.SerializeWrapStarDataV2(jp.Root, attributes, null, modelJson);
                        break;
                    }
                }
            }
            else
            {
                throw new Exception("No WrapStar data available");
            }

            // get attribute based on full path
            // complete path available per ontology at file://wrapstar/WrapStarShare/Ontology 
            // selected path can be generated in WrapStar client for selected attribute
            
            // if want more flexibility when handling list, full JSON tree is available in JsonParser.
            // It simply removed the Kif schema for easy access.
            // sample code for JSON parser is shared with sample scripts as well at
            // file://WrapStar/WrapStarShare/Extractor
            //
            if (attributes != null)
            {
                string latitude, longitude;
                attributes.TryGetValue("/Business/Location.Location[0]/Location.Geocode.Latitude", out latitude);
                attributes.TryGetValue("/Business/Location.Location[0]/Location.Geocode.Longitude", out longitude);

                // need to unescape quote in raw JSON string
                latitude = JsonParser.UnescapeString(latitude);
                longitude = JsonParser.UnescapeString(longitude);

                output[0].Set(row[0].String);
                output[1].Set(row[3].String);
                output[2].Set(latitude);
                output[3].Set(longitude);
                yield return output;
            }
        }
    }
}

// extract wrapstar data from cosmos stream
public class WrapStarExtractor : Extractor
{
    public override Schema Produces(string[] columns, string[] args)
    {
        Schema defaultSchema = new Schema("DocumentURL, Timestamp, HttpReturnCode, Version, Error, ModelCount, Model_ID, Model_Version, Model_Ontology, Model_Latest, Model_Timestamp, Model_Json, Model_Json_Length, Model_TemplateIndex");

        for (int i = 0; i < columns.Length; i++)
        {
            if (columns[i] == "WrapStarJsonOutput")
            {
                defaultSchema.Add(new ColumnInfo("WrapStarJsonOutput", ColumnDataType.String));
                return defaultSchema;
            }
            if (columns[i] == "Model_Extraction")
            {
                defaultSchema.Add(new ColumnInfo("Model_Extraction", ColumnDataType.String));
                return defaultSchema;
            }
        }
        return defaultSchema;
    }

    public override IEnumerable<Row> Extract(StreamReader reader, Row output, string[] args)
    {
        bool showError = false;
        if (args != null)
        {
            foreach (string arg in args)
            {
                if (arg == "showError") showError = true;
            }
        }

        int outputCount = output.Count;
        int level = 1;
        if (output.Schema.Contains("WrapStarJsonOutput"))
        {
            level = 0;
        }
        else if (output.Schema.Contains("Model_Extraction"))
        {
            level = 2;
        }

        string line;
        while ((line = reader.ReadLine()) != null)
        {
            foreach (Dictionary<string, string> wsOutput in WrapStarJsonParser.Parse(line, level))
            {
                // Skip error by default.
                if (!showError && !string.IsNullOrEmpty(wsOutput["Error"])) continue;

                for (int i = 0; i < outputCount; i++)
                {
                    string value;
                    if (wsOutput.TryGetValue(output.Schema[i].Name, out value))
                    {
                        output[i].Set(value);
                    }
                    else
                    {
                        output[i].Set("");
                    }
                }

                yield return output;
            }
        }
    }
}
#ENDCS

// Generated by ScopeStudio, version 1.6.6000.2!
