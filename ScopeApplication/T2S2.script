//Script GUID:77d73596-3b6c-41d7-b70b-e7c7b2828dca
//Used for tracking history

// Suppose all the image on blob storage and url is public accessable
 
///////////////////////////////////////////////
// Cache imagebyte from blob storage container
//////////////////////////////////////////////
#DECLARE InputDataPath string = @@InputDataFile@@;
#DECLARE OutputSuccessDataPath string = @@OutputSuccessDataFileSS@@;
#DECLARE OutputFailedDataPath string = @@OutputFailedDataFileSS@@;
#DECLARE OutputStatsPath string = @@StatsFile@@;

#IF ("@@InputDataFile@@".EndsWith(".ss"))
    InputData = SSTREAM @InputDataPath;
#ELSE
    InputData =
        EXTRACT @@InputSchema@@
        FROM @InputDataPath
        USING DefaultTextExtractor;
#ENDIF

#IF ("@@ImageFormat@@" == "Binary")
    [PARTITION(@@UniqueKeyColName@@)=(PARTITIONFUNCTION=HASH, PARTITIONCOUNT=@@PartitionCount@@)]
    OutputData =
        SELECT *,
               Utils.get_image_from_url(@@CacheUrlCol@@) AS @@ImageColName@@
        FROM InputData;
#ELSE 
    [PARTITION(@@UniqueKeyColName@@)=(PARTITIONFUNCTION=HASH, PARTITIONCOUNT=@@PartitionCount@@)]
    OutputData =
        SELECT *,
               Utils.convert_byte_array_to_base64_string(Utils.get_image_from_url(@@CacheUrlCol@@)) AS @@ImageColName@@
        FROM InputData;
#ENDIF

OutputSuccessData =
    SELECT @@OutputSchema@@
    FROM OutputData
    WHERE @@ImageColName@@ != null AND @@ImageColName@@.Length != 0;

OutputFailedData = 
    SELECT @@OutputSchema@@
    FROM OutputData
    WHERE @@ImageColName@@ == null OR @@ImageColName@@.Length == 0;

OUTPUT OutputSuccessData
TO SSTREAM @OutputSuccessDataPath
HASH CLUSTERED BY @@UniqueKeyColName@@
SORTED BY @@UniqueKeyColName@@;
 
OUTPUT OutputFailedData
TO SSTREAM @OutputFailedDataPath
HASH CLUSTERED BY @@UniqueKeyColName@@
SORTED BY @@UniqueKeyColName@@;

// Generation of stat file
Stats =
    SELECT "Success" AS Status,
           COUNT( * ) AS Count
    FROM OutputData
    WHERE @@ImageColName@@ != null AND @@ImageColName@@.Length != 0
    UNION
    SELECT "Failed" AS Status,
           COUNT( * ) AS Count
    FROM OutputData
    WHERE @@ImageColName@@ == null OR @@ImageColName@@.Length == 0;
 
OUTPUT Stats TO @OutputStatsPath;

#CS
using Microsoft.SCOPE.Types;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using ScopeRuntime;
using System.Net;
 
public static class Utils
{
    public static byte[] get_image_from_url(string url)
    {
        byte[] imageBytes;
        ServicePointManager.SecurityProtocol |= SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
        using (var webClient = new WebClient())
        {
            try
            {
                imageBytes = webClient.DownloadData(url);
            }
            catch (Exception e) {
                return null;
            }
            
        }
        return imageBytes;
    }

	public static string convert_byte_array_to_base64_string(byte[] byte_array)
	{
        string base64_string;
        try
        {
            base64_string = Convert.ToBase64String(byte_array);
        }
        catch (Exception e){
            return null;
        }
		return base64_string;
	}
}
#ENDCS
 