RESOURCE @"D:\Data\MMCB\MMRV2\ProdCo3C\Image\Binaries\HashValue.dll";
REFERENCE @"D:\data\MMCB\MMRV2\ProdCo3C\Image\Binaries\MMRV2.Core.dll";
REFERENCE @"D:\data\MMCB\MMRV2\ProdCo3C\Image\Binaries\MMRV2.Utility.dll";
REFERENCE @"D:\data\MMCB\MMRV2\ProdCo3C\Image\Binaries\Relevance\Relevance.ScopeLib.dll";
REFERENCE "/shares/SegmentRelevance/SegmentRelevance/Reco/Resources/Microsoft.Bing.HashUtil.dll";
USING MMRV2.Utility;
USING MMRV2.Core;

#DECLARE UtcNow DateTime = DateTime.UtcNow;
#DECLARE Now DateTime = @UtcNow.AddHours(-8);
#DECLARE Par_FormatNow string = @Now.ToString("yyyy_MM_dd");
#DECLARE In_SampleLabel = "/local/Prod/Image/Prism/Metrics/AutoMeasurement/SamplesDetrimentalLabelImpression_Regular_2022_07_03.tsv";
#DECLARE In_CurrentIndexV1 string = "/local/Prod/Image/Prism/IndexGen/2022_07_07/CurrentIndexV1.ss";
#DECLARE In_DetrimentalDocs string = "/shares/SegmentRelevance/SegmentRelevance/Prod/Image/SparkSchedulingSupport/Prism/HitApp/RacyFeature/2022_07_07/racy_feature_more.tsv";
#DECLARE Out_DetrimentalDoc string = $"/local/users/v-yangtian/shares/SegmentRelevance/SegmentRelevance/Prod/Image/SparkSchedulingSupport/Prism/HitApp/RacyFeature/{@Par_FormatNow}/racy_feature_more.tsv";

data_group=
    EXTRACT occurrence,
            image_url,
            page_url,
            title,
            RecallPath,
            C_CP,
            C_Abuse,
            C_Adult,
            C_Hate,
            C_Violence,
            C_Dangerous,
            C_Ok,
            C_NotLoad,
            C_Detrimental_Max,
            Adj_C_Ok,
            Class_Agg,
            detrimental_rating 
    FROM @In_SampleLabel
    USING DefaultTextExtractor()
    HAVING detrimental_rating != "ok_to_show" AND detrimental_rating != "image_not_load";

Racy0 =
SELECT  image_url AS murl,
        page_url AS purl,
        detrimental_rating AS label
        FROM data_group;

RacyCandidate =
    SELECT DISTINCT murl,
                    purl,
                    FIRST(label) AS label
    GROUP BY murl,
             purl;

detrimental_doc=
    EXTRACT murl : string,
            purl : string,
            label : string,
            DocKey : string,
            Vector : string,
            TenantId : string,
            Date : DateTime
    FROM @In_DetrimentalDocs
    USING Extractors.Tsv(skipFirstNRows: 1);

RacyCandidate =
    SELECT *
    FROM RacyCandidate AS a
            LEFT ANTISEMIJOIN
                detrimental_doc AS b
            ON a.murl == b.murl AND a.purl == b.purl;

CurrentIndexV1 =
    SELECT *
    FROM (SSTREAM @In_CurrentIndexV1);

RacyFeature = 
    SELECT a.murl,
		   a.purl,
           a.label,
           b.LargeFeature__SIEMv3ImageEncoded_Binary,
           b.TextFeatures__SIEMv3TextVector
    FROM RacyCandidate AS a
         INNER JOIN
             CurrentIndexV1 AS b
         ON a.murl == b.MUrl AND a.purl == b.PUrl;

NoduleListWithNormalizedImagevector =
    SELECT murl,
		   purl,
           label,
           Utils.NormalizeVector(n.LargeFeature__SIEMv3ImageEncoded_Binary) AS SIEMv3ImageVectorNormalized,
           n.TextFeatures__SIEMv3TextVector AS SIEMv3TextVector
    FROM RacyFeature AS n
    WHERE !String.IsNullOrEmpty(n.LargeFeature__SIEMv3ImageEncoded_Binary);

delta_detrimental_doc=
    SELECT murl,
           purl,
           label,
           Utils.GetDocKeyBase64(murl, purl) AS DocKey,
           Utils.GetFullVector(SIEMv3ImageVectorNormalized, SIEMv3TextVector) AS Vector,
           "PrismImage" AS TenantId,
           @Now AS Date
    FROM NoduleListWithNormalizedImagevector
    WHERE !String.IsNullOrEmpty(SIEMv3ImageVectorNormalized) && !String.IsNullOrEmpty(SIEMv3TextVector);

DetrimentalDoc = SELECT * FROM (
    SELECT * FROM detrimental_doc
    UNION ALL
    SELECT * FROM delta_detrimental_doc) ORDER BY Date DESC;

OUTPUT DetrimentalDoc
TO @Out_DetrimentalDoc
USING DefaultTextOutputter(delimiter:'\t', outputHeader:true);

#CS

using Microsoft.Bing.HashUtil;

public static class Utils
{
    public static string GetDocKeyBase64(string mediaUrl, string pageUrl)
    {
        return ConvertDocKeyToBase64(GetDocKeyBinary(mediaUrl, pageUrl));
    }

    public static byte[] GetDocKeyBinary(string mediaUrl, string pageUrl)
    {
        var hashIndex = pageUrl.IndexOf("#");

        var pageUrlForDocKey = hashIndex != -1 ? pageUrl.Substring(0, hashIndex) : pageUrl;

        return Microsoft.Bing.HashUtil.HutHash.GetHashAsBinary(
            Microsoft.Bing.HashUtil.HutHash.GetUrlHashAsBase64String(mediaUrl)
            + Microsoft.Bing.HashUtil.HutHash.GetUrlHashAsBase64String(pageUrlForDocKey));
    }

    public static string ConvertDocKeyToBase64(byte[] docKey)
    {
        return Convert.ToBase64String(docKey).Substring(0, 22);
    }

    public static string GetFullVector(string vector1, string vector2)
    {
        var concat = string.Format("{0} {1}", vector1, vector2);
        var split = concat.Split(' ');
        return string.Join("|", split);
    }

    public static string NormalizeVector(string vectorString)
    {
        List<float> vector = new List<float>();
        var imageStrings = vectorString.Split(',');

        for (int i = 0; i < imageStrings.Length; i++)
        {
            // values are quantized to 8 bits (numbers are between 0 - 255), it means that to get the original values, we need to run this operation on each vector x: (x/127.5) - 1
            vector.Add((float)((float.Parse(imageStrings[i]) / 127.5) - 1));
        }

        return string.Join(" ", vector);
    }
    
    public static Boolean isValidVector(string SIEMv3ImageEncoded_Binary)
    {   
        if(String.IsNullOrEmpty(SIEMv3ImageEncoded_Binary))
        {
            return false;
        }
        string[] imageStrings = SIEMv3ImageEncoded_Binary.Split(',');
        var total = 0.0;
        for(int i = 0; i < 32; i++)
        {
            total += Convert.ToDouble(imageStrings[i]);
        }
        return (total != 0);
     }

}

#ENDCS