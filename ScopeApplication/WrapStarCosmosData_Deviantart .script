REFERENCE "/shares/DocumentUnderstanding.Prod/WrapStarStream/DistribBeta/Microsoft.WrapStar.Shared.dll";
REFERENCE "/shares/DocumentUnderstanding.Prod/WrapStarStream/DistribBeta/Newtonsoft.Json.dll";
RESOURCE "/local/users/v-yangtian/DeviantartTags.tsv";

//#DECLARE date = "2022_09_28";
//#DECLARE inputStream string = $"/shares/DocumentUnderstanding.Prod/WrapStarStream/Callisto/Prod/{@date}/%h/%n.dat?&hour=0...23&serialnum=0...511&sparsestreamset=true";
//#DECLARE outputStream string = $"/local/users/v-yangtian/WrapStar/{@date}/deviantart.ss";

#DECLARE startDate = "2022-09-28";
#DECLARE endDate = "2022-09-30";
#DECLARE inputStream string = $"/shares/DocumentUnderstanding.Prod/WrapStarStream/Callisto/Prod/%Y_%m_%d/%h/%n.dat?date={@startDate}...{@endDate}&hour=0...23&serialnum=0...511&sparsestreamset=true";
#DECLARE outputStream string = $"/local/users/v-yangtian/period/{@startDate}_{@endDate}/deviantart.ss";
#DECLARE outputTsv string = $"/local/users/v-yangtian/period/{@startDate}_{@endDate}/deviantart.tsv";

ModelData =
    EXTRACT DocumentURL,
            Model_ID,
            Model_Version,
            Model_Ontology,
            Model_Latest,
            Model_Timestamp,
            Model_Json
    FROM @inputStream
    USING WrapStarExtractor()
    HAVING
    Model_Version == "147050" AND Model_Ontology == "Image";

//OUTPUT
//TO SSTREAM "/local/users/v-yangtian/MoDelData__Deviantart.ss";

ExtractedAttribute =
    PROCESS
    ModelData
    USING WrapStarProcessor
    PRODUCE
        PageUrl,ImageUrl,Title,Width,Heigth,Likes,Comments,Views,Tags;

ExtractedAttribute =
    SELECT DISTINCT *
    FROM ExtractedAttribute
    WHERE IsContainsDeviantartTags(Tags);

OUTPUT
TO SSTREAM @outputStream;

OUTPUT
TO @outputTsv
USING DefaultTextOutputter(outputHeader: true);


#CS
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using ScopeRuntime;
using Microsoft.WrapStar.Shared;
using Newtonsoft.Json.Linq;

 //processor to further handle WrapStar output and return particular attributes
public class WrapStarProcessor : Processor
{
    public override Schema Produces(string[] columns, string[] args, Schema input)
    {
        return new Schema("PageUrl,ImageUrl,Title,Width,Heigth,Likes,Comments,Views,Tags");
    }

    private static int GetColumnIndex(Schema schema, string name)
    {
        return schema.Contains(name) ? schema.IndexOf(name) : -1;
    }

    public override IEnumerable<Row> Process(RowSet input, Row output, string[] args)
    {
        int idxModelJson = GetColumnIndex(input.Schema, "Model_Json");
        foreach (Row row in input.Rows)
        {
            if (idxModelJson >= 0)
            {
                string model_jsonStr = row["Model_Json"].ToString();
                string pageUrl = row["DocumentURL"].ToString();
                var propertiesCount = JObject.Parse(model_jsonStr)["Entities"].Count() > 0 ? JObject.Parse(model_jsonStr)["Entities"][0]["Properties"].Count() : 0;
                var rootEntities = JObject.Parse(model_jsonStr)["Entities"];
                if (rootEntities.Count() > 0)
                {
                    var rootProperties = rootEntities[0]["Properties"];
                    if (rootProperties.Count() > 0)
                    {
                        if (rootProperties[0]["Entities"].Count() > 0)
                        {
                            if (rootProperties[0]["Entities"][0]["Properties"].Count() > 0)
                            {
                                var tagsObjList = rootProperties[0]["Entities"][0]["Properties"][0]["Entities"];
                                if (tagsObjList.Count() > 0)
                                {
                                    List<string> tagList = new List<string>();
                                    foreach (var item in tagsObjList)
                                    {
                                        if (item != null && item["Properties"].Count() > 0)
                                        {
                                            if(item["Properties"][0]["Value"].Count() > 0)
                                            {
                                                string tag = item["Properties"][0]["Value"][0].ToString().Trim();
                                                tagList.Add(tag);
                                            }
                                        }
                                    }
                                    string imageUrl = rootProperties.Count() > 1 ? rootProperties[1]["Value"].Count() > 0 ? rootProperties[1]["Value"][0].ToString().Trim() : "" : "";
                                    var likes = rootProperties.Count() > 2 ? rootProperties[2]["Value"].Count() > 0 ? rootProperties[2]["Value"][0].ToString().Replace("K", "000").Trim(): "" : "";
                                    var comments = rootProperties.Count() > 3 ? rootProperties[3]["Value"].Count() > 0 ?rootProperties[3]["Value"][0].ToString().Replace("K", "000").Trim() : "" : "";
                                    var views = rootProperties.Count() > 4 ? rootProperties[4]["Value"].Count() > 0 ? rootProperties[4]["Value"][0].ToString().Replace("K", "000").Trim() :  "" : "";
                                    string title = rootProperties.Count() > 5 ? rootProperties[5]["Value"].Count() > 0 ? rootProperties[5]["Value"][0].ToString().Trim() : "" : "";
                                    string width = rootProperties.Count() > 6 ? rootProperties[6]["Value"].Count() > 0 ? rootProperties[6]["Value"][0].ToString().Trim() : "" : "";
                                    string height = rootProperties.Count() > 7 ? rootProperties[7]["Value"].Count() > 0 ? rootProperties[7]["Value"][0].ToString().Trim() : "" : "";
                                    string tags = string.Join(",", tagList);
                                    output[0].Set(pageUrl);
                                    output[1].Set(imageUrl);
                                    output[2].Set(title);
                                    output[3].Set(width);
                                    output[4].Set(height);
                                    output[5].Set(likes);
                                    output[6].Set(comments);
                                    output[7].Set(views);
                                    output[8].Set(tags);
                                }
                            }
                        }
                    }
                }
                yield return output;

            }
            else
            {
                throw new Exception("No WrapStar data available");
            }
        }
    }
}


// extract wrapstar data from cosmos stream
public class WrapStarExtractor : Extractor
{
    public override Schema Produces(string[] columns, string[] args)
    {
        Schema defaultSchema = new Schema("DocumentURL, Timestamp, HttpReturnCode, Version, Error, ModelCount, Model_ID, Model_Version, Model_Ontology, Model_Latest, Model_Timestamp, Model_Json, Model_Json_Length, Model_TemplateIndex");

        for (int i = 0; i < columns.Length; i++)
        {
            if (columns[i] == "WrapStarJsonOutput")
            {
                defaultSchema.Add(new ColumnInfo("WrapStarJsonOutput", ColumnDataType.String));
                return defaultSchema;
            }
            if (columns[i] == "Model_Extraction")
            {
                defaultSchema.Add(new ColumnInfo("Model_Extraction", ColumnDataType.String));
                return defaultSchema;
            }
        }
        return defaultSchema;
    }

    public override IEnumerable<Row> Extract(StreamReader reader, Row output, string[] args)
    {
        bool showError = false;
        if (args != null)
        {
            foreach (string arg in args)
            {
                if (arg == "showError") showError = true;
            }
        }

        int outputCount = output.Count;
        int level = 1;
        if (output.Schema.Contains("WrapStarJsonOutput"))
        {
            level = 0;
        }
        else if (output.Schema.Contains("Model_Extraction"))
        {
            level = 2;
        }

        string line;
        while ((line = reader.ReadLine()) != null)
        {
            foreach (Dictionary<string, string> wsOutput in WrapStarJsonParser.Parse(line, level))
            {
                // Skip error by default.
                if (!showError && !string.IsNullOrEmpty(wsOutput["Error"])) continue;

                for (int i = 0; i < outputCount; i++)
                {
                    string value;
                    if (wsOutput.TryGetValue(output.Schema[i].Name, out value))
                    {
                        output[i].Set(value);
                    }
                    else
                    {
                        output[i].Set("");
                    }
                }

                yield return output;
            }
        }
    }
}


static HashSet<string> deviantartTags = new HashSet<string>(File.ReadAllLines(Path.GetFileName("/local/users/v-yangtian/DeviantartTags.tsv")));

public static bool IsContainsDeviantartTags(string tags)
{
    foreach (var tag in tags.Split(','))
    {
        if (deviantartTags.Contains(tag))
            return true;
    }
    return false;
}

#ENDCS