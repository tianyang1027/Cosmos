
REFERENCE @"/shares/SegmentRelevance/SegmentRelevance/Reco/Resources/Microsoft.Bing.HashUtil.dll";

#DECLARE InputFilePath string = "/azureml/ceca08b6-bf05-4480-9b06-1ab94cf35ad4/OutputPath/2023-03-20/matrix_predictions_for_allusers.tsv";

#DECLARE BaseFolder string = "/local/Prod/Image/Prism/MMvis/PrismyV3NonDefect/";
#DECLARE OutMMVis string = @BaseFolder + @InputFilePath.Replace("/", "_");
#DECLARE OutOriginalStream string = @BaseFolder + "OriginalStream/" + @InputFilePath.Replace("/", "_");
#DECLARE SamplesNum int = 50;
#DECLARE Par_LwTextDate string = "2023_04_17";
#DECLARE In_LwTextTensorV3 string = @"/local/Prod/Image/Prism/IndexGen/V3/" + @Par_LwTextDate + "/Sensors/ExtractedLwTextNoduleFeaturesSensor.ss";
#DECLARE In_LwTextTensorV5 string = @"/local/Prod/Image/Prism/IndexGen/V5/" + @Par_LwTextDate + "/Sensors/ExtractedLwTextNoduleFeaturesSensor.ss";
#DECLARE In_LwTextTensorV6 string = @"/local/Prod/Image/Prism/IndexGen/V6/" + @Par_LwTextDate + "/Sensors/ExtractedLwTextNoduleFeaturesSensor.ss";

CFDocs =
    EXTRACT UserId : string,
            RecoItemList : string,
            ScoreList : string
    FROM @InputFilePath
    USING DefaultTextExtractor(skipFirstNRows : 1);

CFDocs =
    SELECT UserId,
           DocId
    FROM CFDocs
         CROSS APPLY RecoItemList.Split(';') AS DocId;

CFDocs =
    SELECT DISTINCT DocId
    FROM CFDocs
    WHERE !string.IsNullOrEmpty(DocId);

Rank =
    SSTREAM "/local/Prod/Image/Prism/2023-04-16/PrismProdRank_0_PPE_v3.ss";

Rank =
    SELECT *,
           GetDocKeyBase64(MUrl, PUrl) AS DocId;

original_stream =
    SELECT DISTINCT b.*
    FROM CFDocs AS a
    INNER JOIN
        Rank AS b
        ON a.DocId == b.DocId
    GROUP BY Key,
             PKey,
             MUrl,
             PUrl,
             MDomain,
             PDomain,
             Signature,
             Language,
             Country,
             Width,
             Height,
             AspectRatio,
             ProdThumbnailKey,
             Score,
             AdjustedRank,
             OrgRank,
             DupSignature,
             PinterestImage,
             HasPinterestContent,
             Clicked,
             HasClickedContent,
             DupCnt,
             NonPinterestDupCnt,
             RepinCount,
             PrismyScore,
             PrismyV3NonDefect,
             PrismyV3Rank,
             AdultScore,
             RacyScore,
             GruesomeScore,
             WatermarkProbability,
             FaceSatoriIdConf,
             Source,
             AdjustedPrismyScore,
             DocId;

OUTPUT
TO @OutOriginalStream
USING DefaultTextOutputter(outputHeader: true);

bucket =
    SELECT *,
           "96_100" AS BucketName
    FROM original_stream
    WHERE PrismyV3NonDefect > 96 AND PrismyV3NonDefect <= 100;

samples =
    SELECT *
    FROM bucket SAMPLE ANY (@SamplesNum);

totalCount =
    SELECT COUNT( * ) AS totalCount
    FROM original_stream;

stats =
    SELECT "96_100" AS BucketName,
           COUNT( * ) AS Count
    FROM original_stream
    WHERE PrismyV3NonDefect > 96 AND PrismyV3NonDefect <= 100;

LOOP (I, 50)
{
stats =
    SELECT *
    FROM stats
    UNION
    SELECT (96 - (@@I@@) * 4).ToString() + "_" + (100 - (@@I@@) * 4).ToString() AS BucketName,
           COUNT( * ) AS Count
    FROM original_stream
    WHERE PrismyV3NonDefect > 96 - (@@I@@) * 4 AND PrismyV3NonDefect <= 100 - (@@I@@) * 4;

bucket =
    SELECT *,
           (96 - (@@I@@) * 4).ToString() + "_" + (100 - (@@I@@) * 4).ToString() AS BucketName
    FROM original_stream
    WHERE PrismyV3NonDefect > 96 - (@@I@@) * 4 AND PrismyV3NonDefect <= 100 - (@@I@@) * 4;

samples =
    SELECT *
    FROM samples
    UNION
    SELECT *
    FROM bucket SAMPLE ANY (@SamplesNum);
}

lwText =
    SELECT DISTINCT Key,
                    PageKey,
                    TextFeatures__PageTitle AS PageTitle
    FROM
    (
        SSTREAM @In_LwTextTensorV3
    )
    UNION
    SELECT DISTINCT Key,
                    PageKey,
                    TextFeatures__PageTitle AS PageTitle
    FROM
    (
        SSTREAM @In_LwTextTensorV5
    )
    UNION
    SELECT DISTINCT Key,
                    PageKey,
                    TextFeatures__PageTitle AS PageTitle
    FROM (SSTREAM @In_LwTextTensorV6);

lwText =
    SELECT Key,
           PageKey,
           ANY_VALUE(PageTitle) AS PageTitle
    FROM lwText
    GROUP BY Key,
             PageKey;

samplesWithTitle =
    SELECT a.BucketName,
           a.Key,
           a.PKey,
           a.MUrl,
           a.PUrl,
           a.MDomain,
           a.PDomain,
           a.ProdThumbnailKey,
           a.PrismyV3Rank,
           a.PrismyV3NonDefect,
           b.TextFeatures__PageTitle AS Title
    FROM samples AS a
    LEFT JOIN
        lwText AS b
        ON a.Key == b.Key
           AND a.PKey == b.PageKey;

stats =
    SELECT *,
           (a.Count * 1.0 / b.totalCount) AS Percentage
    FROM stats AS a
    CROSS JOIN
        totalCount AS b;

mmvis =
    SELECT a.BucketName,
           a.Key,
           a.PKey,
           a.MUrl,
           a.PUrl,
           a.MDomain,
           a.PDomain,
           a.ProdThumbnailKey,
           a.PrismyV3Rank,
           a.PrismyV3NonDefect,
           a.Title,
           b.Percentage,
           @SamplesNum AS SamplesNum
    FROM samplesWithTitle AS a
    LEFT JOIN
        stats AS b
        ON a.BucketName == b.BucketName;

OUTPUT
TO @OutMMVis
USING DefaultTextOutputter(outputHeader: true);

#CS
using Microsoft.Bing.HashUtil;

public static string GetDocKeyBase64(string mediaUrl, string pageUrl)
{
    return ConvertDocKeyToBase64(GetDocKeyBinary(mediaUrl, pageUrl));
}

public static byte[] GetDocKeyBinary(string mediaUrl, string pageUrl)
{
    var hashIndex = pageUrl.IndexOf("#");

    var pageUrlForDocKey = hashIndex != -1 ? pageUrl.Substring(0, hashIndex) : pageUrl;

    return Microsoft.Bing.HashUtil.HutHash.GetHashAsBinary(
        Microsoft.Bing.HashUtil.HutHash.GetUrlHashAsBase64String(mediaUrl)
        + Microsoft.Bing.HashUtil.HutHash.GetUrlHashAsBase64String(pageUrlForDocKey));
}

public static string ConvertDocKeyToBase64(byte[] docKey)
{
    return Convert.ToBase64String(docKey).Substring(0, 22);
}


#ENDCS