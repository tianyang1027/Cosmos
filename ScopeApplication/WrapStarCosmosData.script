REFERENCE "/shares/DocumentUnderstanding.Prod/WrapStarStream/DistribBeta/Microsoft.WrapStar.Shared.dll";
REFERENCE "/shares/DocumentUnderstanding.Prod/WrapStarStream/DistribBeta/Newtonsoft.Json.dll";


#DECLARE inputStream string = "/shares/DocumentUnderstanding.Prod/WrapStarStream/Callisto/Prod/2022_09_22/%h/%n.dat?&hour=0...23&serialnum=0...500";
#DECLARE outputStream string = "/local/users/v-yangtian/WrapStar/reddit_2022_09_22_w_suggestedmurl.ss";

ModelData =
    EXTRACT DocumentURL,
            Model_ID,
            Model_Version,
            Model_Ontology,
            Model_Latest,
            Model_Timestamp,
            Model_Json

    FROM @inputStream
    USING WrapStarExtractor()

    HAVING
    Model_Version == "146881" AND Model_Ontology == "Image"

    WITH SAMPLE 100 PERCENT;

OUTPUT
TO SSTREAM "/users/v-yangtian/WrapStar/ModelData.ss";

ExtractedAttribute =
    PROCESS
    ModelData
    USING WrapStarProcessor
    PRODUCE PageUrl,
            ImageUrl,
            Description,
            Title,
            Width,
            Heigth;


ExtractedAttribute =
    SELECT PageUrl,
           ImageUrl,
           Description,
           Width,
           Heigth,
           Title
    FROM ExtractedAttribute
    WHERE !string.IsNullOrEmpty(Title);

ExtractedAttribute =
    SELECT PageUrl,
           ImageUrl,
           Description,
           Width,
           Heigth,
           Title,
           PostProcessor.GetCommunity(Title) AS Community,
           PostProcessor.GetVoteCount(Description) AS VoteCount,
           PostProcessor.GetCommentCount(Description) AS CommentCount,
           PostProcessor.GetSuggestedUrl(ImageUrl) AS SuggestedImageUrl
    WHERE Title.ToLower().Contains("midjourney") OR Title.ToLower().Contains("dalle2") OR Title.ToLower().Contains("stablediffusion");

ExtractedAttribute =
    SELECT DISTINCT *
    FROM ExtractedAttribute;

    

OUTPUT
TO SSTREAM @outputStream;


#CS
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Linq;
using ScopeRuntime;
using Microsoft.WrapStar.Shared;
using Newtonsoft.Json.Linq;

// processor to further handle WrapStar output and return particular attributes
public class WrapStarProcessor : Processor
{
    public override Schema Produces(string[] columns, string[] args, Schema input)
    {
        return new Schema("PageUrl,ImageUrl,Title,Width,Heigth,Description");
    }

    private static int GetColumnIndex(Schema schema, string name)
    {
        return schema.Contains(name) ? schema.IndexOf(name) : -1;
    }

    public override IEnumerable<Row> Process(RowSet input, Row output, string[] args)
    {
        int idxModelJson = GetColumnIndex(input.Schema, "Model_Json");
        foreach (Row row in input.Rows)
        {
            if (idxModelJson >= 0)
            {
                string model_jsonStr = row["Model_Json"].ToString();
                string pageUrl = row["DocumentURL"].ToString();
                if (JObject.Parse(model_jsonStr)["Entities"].Count() > 0 && JObject.Parse(model_jsonStr)["Entities"][0]["Properties"].Count() > 0)
                {
                    var description = JObject.Parse(model_jsonStr)["Entities"][0]["Properties"][0]["Value"][0].ToString();
                    var title = JObject.Parse(model_jsonStr)["Entities"][0]["Properties"][1]["Value"][0].ToString();
                    var url = JObject.Parse(model_jsonStr)["Entities"][0]["Properties"][2]["Value"][0].ToString();
                    var height = JObject.Parse(model_jsonStr)["Entities"][0]["Properties"][3]["Value"][0].ToString();
                    var width = JObject.Parse(model_jsonStr)["Entities"][0]["Properties"][4]["Value"][0].ToString();
                    output[0].Set(pageUrl);
                    output[1].Set(url);
                    output[2].Set(title);
                    output[3].Set(width);
                    output[4].Set(height);
                    output[5].Set(description);
                }
                yield return output;

            }
            else
            {
                throw new Exception("No WrapStar data available");
            }
        }
    }
}

// extract wrapstar data from cosmos stream
public class WrapStarExtractor : Extractor
{
    public override Schema Produces(string[] columns, string[] args)
    {
        Schema defaultSchema = new Schema("DocumentURL, Timestamp, HttpReturnCode, Version, Error, ModelCount, Model_ID, Model_Version, Model_Ontology, Model_Latest, Model_Timestamp, Model_Json, Model_Json_Length, Model_TemplateIndex");

        for (int i = 0; i < columns.Length; i++)
        {
            if (columns[i] == "WrapStarJsonOutput")
            {
                defaultSchema.Add(new ColumnInfo("WrapStarJsonOutput", ColumnDataType.String));
                return defaultSchema;
            }
            if (columns[i] == "Model_Extraction")
            {
                defaultSchema.Add(new ColumnInfo("Model_Extraction", ColumnDataType.String));
                return defaultSchema;
            }
        }
        return defaultSchema;
    }

    public override IEnumerable<Row> Extract(StreamReader reader, Row output, string[] args)
    {
        bool showError = false;
        if (args != null)
        {
            foreach (string arg in args)
            {
                if (arg == "showError") showError = true;
            }
        }

        int outputCount = output.Count;
        int level = 1;
        if (output.Schema.Contains("WrapStarJsonOutput"))
        {
            level = 0;
        }
        else if (output.Schema.Contains("Model_Extraction"))
        {
            level = 2;
        }

        string line;
        while ((line = reader.ReadLine()) != null)
        {
            foreach (Dictionary<string, string> wsOutput in WrapStarJsonParser.Parse(line, level))
            {
                // Skip error by default.
                if (!showError && !string.IsNullOrEmpty(wsOutput["Error"])) continue;

                for (int i = 0; i < outputCount; i++)
                {
                    string value;
                    if (wsOutput.TryGetValue(output.Schema[i].Name, out value))
                    {
                        output[i].Set(value);
                    }
                    else
                    {
                        output[i].Set("");
                    }
                }

                yield return output;
            }
        }
    }
}

public class PostProcessor
{
    public static string GetCommunity(string Title)
    {
        if (string.IsNullOrEmpty(Title))
            return "NoCommunityInfo";

        string community = Title.Split(' ')[0];

        if (community.Length >= 2)
        {
            return community.Substring(2);
        }
        else
        {
            return "ErrorCommunityInfo";
        }
        
    }

    public static int GetVoteCount(string Description)
    {
        if (string.IsNullOrEmpty(Description))
            return -1;

        Regex regex = new Regex(@"\d+");
        var list = (from Match m in regex.Matches(Description.Replace(",", "")) select m.Value).ToList();
        if (list.Count >= 2)
        {
           return int.Parse(list[0]);
        }
       return -1;
    }

    public static int GetCommentCount(string Description)
    {
        if (string.IsNullOrEmpty(Description))
            return -1;

        Regex regex = new Regex(@"\d+");
        var list = (from Match m in regex.Matches(Description.Replace(",", "")) select m.Value).ToList();
        if (list.Count >= 2)
        {
           return int.Parse(list[1]);
        }
        return -1;
    }

    public static string GetSuggestedUrl(string ImageUrl)
    { 
        if (string.IsNullOrEmpty(ImageUrl))
            return ImageUrl;
        return "https://i.redd.it/" + ImageUrl.Split('?')[0].Split('/').Last();
    }
}

#ENDCS

// Generated by ScopeStudio, version 3.3.1000.3