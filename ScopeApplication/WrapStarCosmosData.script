REFERENCE "/shares/DocumentUnderstanding.Prod/WrapStarStream/DistribBeta/Microsoft.WrapStar.Shared.dll";
REFERENCE "/shares/DocumentUnderstanding.Prod/WrapStarStream/DistribBeta/Newtonsoft.Json.dll";


#DECLARE date string = "2022_09_26";
#DECLARE inputStream string =  $"/shares/DocumentUnderstanding.Prod/WrapStarStream/Callisto/Prod/{@date}/%h/%n.dat?&hour=0...23&serialnum=0...511&sparsestreamset=true";
#DECLARE outputStream string =  $"/local/users/v-yangtian/WrapStar/{@date}/reddit.ss";


//#DECLARE startDate = "2022-09-20";
//#DECLARE endDate = "2022-09-27";
//#DECLARE inputStream string = $"/shares/DocumentUnderstanding.Prod/WrapStarStream/Callisto/Prod/%Y_%m_%d/%h/%n.dat?date={@startDate}...{@endDate}&hour=0...23&serialnum=0...511&sparsestreamset=true";
//#DECLARE outputStream string = $"/local/users/v-yangtian/WrapStar/period/{@startDate}_{@endDate}/reddit.ss";

ModelData =
    EXTRACT DocumentURL,
            Model_ID,
            Model_Version,
            Model_Ontology,
            Model_Latest,
            Model_Timestamp,
            Model_Json
    FROM @inputStream
    USING WrapStarExtractor()
    HAVING
    Model_Version == "146881" AND Model_Ontology == "Image";



OutputData =
    PROCESS
    ModelData
    USING WrapStarProcessor
    PRODUCE PageUrl,
            ImageUrl,
            Description,
            Title,
            Width,
            Heigth,
            Community,
            Vote,
            Comment;

ExtractedAttribute =
    SELECT PageUrl,
           ImageUrl,
           Title,
           Width,
           Heigth,
           Community,
           ARRAY_AGG(Description).OrderByDescending(x => x.Split(' ') [0].All(char.IsDigit) ? Convert.ToInt64(x.Split(' ') [0]) : 0).First() AS Description,
           MAX(Vote) AS Vote,
           MAX(Comment) AS Comment
    FROM OutputData
    GROUP BY PageUrl,
             ImageUrl,
             Title,
             Width,
             Heigth,
             Community
    WHERE Community IN("StableDiffusion", "dalle2", "midjourney");

OUTPUT
TO SSTREAM @outputStream;

#CS
using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using ScopeRuntime;
using Microsoft.WrapStar.Shared;
using Newtonsoft.Json.Linq;

// processor to further handle WrapStar output and return particular attributes
public class WrapStarProcessor : Processor
{
    public override Schema Produces(string[] columns, string[] args, Schema input)
    {
        return new Schema("PageUrl,ImageUrl,Title,Width,Heigth,Description,Community,Vote,Comment");
    }

    private static int GetColumnIndex(Schema schema, string name)
    {
        return schema.Contains(name) ? schema.IndexOf(name) : -1;
    }

    public override IEnumerable<Row> Process(RowSet input, Row output, string[] args)
    {
        int idxModelJson = GetColumnIndex(input.Schema, "Model_Json");
        foreach (Row row in input.Rows)
        {
            if (idxModelJson >= 0)
            {
                string model_jsonStr = row["Model_Json"].ToString();
                string pageUrl = row["DocumentURL"].ToString();
                var propertiesCount = JObject.Parse(model_jsonStr)["Entities"].Count() > 0 ? JObject.Parse(model_jsonStr)["Entities"][0]["Properties"].Count() : 0;
                if (JObject.Parse(model_jsonStr)["Entities"].Count() > 0 && propertiesCount > 0)
                {
                    var description = propertiesCount > 0 ? JObject.Parse(model_jsonStr)["Entities"][0]["Properties"][0]["Value"].Count() > 0 ? JObject.Parse(model_jsonStr)["Entities"][0]["Properties"][0]["Value"][0].ToString().Trim() : "" : "";
                    var title = propertiesCount > 1 ? JObject.Parse(model_jsonStr)["Entities"][0]["Properties"][1]["Value"].Count() > 0 ? JObject.Parse(model_jsonStr)["Entities"][0]["Properties"][1]["Value"][0].ToString().Replace("r/", "").Trim(): "" : "";
                    var url = propertiesCount > 2 ? JObject.Parse(model_jsonStr)["Entities"][0]["Properties"][2]["Value"].Count() > 0 ? JObject.Parse(model_jsonStr)["Entities"][0]["Properties"][2]["Value"][0].ToString().Trim() : "" : "";
                    var height = propertiesCount > 3 ? JObject.Parse(model_jsonStr)["Entities"][0]["Properties"][3]["Value"].Count() > 0 ? JObject.Parse(model_jsonStr)["Entities"][0]["Properties"][3]["Value"][0].ToString().Trim() : "" : "";
                    var width = propertiesCount > 4 ? JObject.Parse(model_jsonStr)["Entities"][0]["Properties"][4]["Value"].Count() > 0 ? JObject.Parse(model_jsonStr)["Entities"][0]["Properties"][4]["Value"][0].ToString().Trim() : "" : "";
                    var vote = !string.IsNullOrEmpty(description)  ? description.Split(' ').Length > 0 ? description.Split(' ')[0].Trim().All(char.IsDigit)? Convert.ToInt64(description.Split(' ')[0].Trim().Replace(",", "")) : -1 : -1 : -1;
                    var comment = !string.IsNullOrEmpty(description) ? description.Split(' ').Length > 3 ?description.Split(' ')[3].Trim().All(char.IsDigit)? Convert.ToInt64(description.Split(' ')[3].Trim().Replace(",", "")) : -1 : -1: -1;
                    var community = !string.IsNullOrEmpty(title) ? title.Split('-').Length > 0 ? title.Split('-')[0].Trim(): "" : "";
                    output[0].Set(pageUrl);
                    output[1].Set(url);
                    output[2].Set(title);
                    output[3].Set(width);
                    output[4].Set(height);
                    output[5].Set(description);
                    output[6].Set(community);
                    output[7].Set(vote);
                    output[8].Set(comment);
                }
                yield return output;

            }
            else
            {
                throw new Exception("No WrapStar data available");
            }
        }
    }
}


// extract wrapstar data from cosmos stream
public class WrapStarExtractor : Extractor
{
    public override Schema Produces(string[] columns, string[] args)
    {
        Schema defaultSchema = new Schema("DocumentURL, Timestamp, HttpReturnCode, Version, Error, ModelCount, Model_ID, Model_Version, Model_Ontology, Model_Latest, Model_Timestamp, Model_Json, Model_Json_Length, Model_TemplateIndex");

        for (int i = 0; i < columns.Length; i++)
        {
            if (columns[i] == "WrapStarJsonOutput")
            {
                defaultSchema.Add(new ColumnInfo("WrapStarJsonOutput", ColumnDataType.String));
                return defaultSchema;
            }
            if (columns[i] == "Model_Extraction")
            {
                defaultSchema.Add(new ColumnInfo("Model_Extraction", ColumnDataType.String));
                return defaultSchema;
            }
        }
        return defaultSchema;
    }

    public override IEnumerable<Row> Extract(StreamReader reader, Row output, string[] args)
    {
        bool showError = false;
        if (args != null)
        {
            foreach (string arg in args)
            {
                if (arg == "showError") showError = true;
            }
        }

        int outputCount = output.Count;
        int level = 1;
        if (output.Schema.Contains("WrapStarJsonOutput"))
        {
            level = 0;
        }
        else if (output.Schema.Contains("Model_Extraction"))
        {
            level = 2;
        }

        string line;
        while ((line = reader.ReadLine()) != null)
        {
            foreach (Dictionary<string, string> wsOutput in WrapStarJsonParser.Parse(line, level))
            {
                // Skip error by default.
                if (!showError && !string.IsNullOrEmpty(wsOutput["Error"])) continue;

                for (int i = 0; i < outputCount; i++)
                {
                    string value;
                    if (wsOutput.TryGetValue(output.Schema[i].Name, out value))
                    {
                        output[i].Set(value);
                    }
                    else
                    {
                        output[i].Set("");
                    }
                }

                yield return output;
            }
        }
    }
}
#ENDCS