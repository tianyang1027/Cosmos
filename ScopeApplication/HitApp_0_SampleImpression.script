//Script GUID:e58cf231-5c6e-4ff7-ae29-01f7f431a9ed
//Used for tracking history
RESOURCE @"D:\sd\SearchGold\deploy\builds\data\latest\MMCB\MMRV2\ProdCo3C\Image\Binaries\HashValue.dll";
REFERENCE @"D:\sd\SearchGold\deploy\builds\data\latest\MMCB\MMRV2\ProdCo3C\Image\Binaries\MMRV2.Core.dll"; 
REFERENCE @"D:\sd\SearchGold\deploy\builds\data\latest\MMCB\MMRV2\ProdCo3C\Image\Binaries\MMRV2.Utility.dll";
REFERENCE @"D:\sd\SearchGold\deploy\builds\data\latest\MMCB\MMRV2\ProdCo3C\Image\Binaries\Relevance\Relevance.ScopeLib.dll";
USING MMRV2.Utility;
#DECLARE InputStartDate string = "2022-09-25";
#DECLARE InputEndDate string = "2022-10-09";
//#DECLARE In_LwNodule string = "/local/Prod/Image/Prism/IndexGen/PPE/2022_10_09/Sensors/ExtractedLwTextNoduleFeaturesSensor.ss";
#DECLARE In_Language string = "en";
#DECLARE SampleNumber string = "5000";
#DECLARE TODAY string = "2022-10-09";
#DECLARE Par_Event string = "save";
#DECLARE FlightID string = "imgfeedprod";
#DECLARE JobName string = "Impression_Sample_5000_save_small";
#DECLARE StartDate string = (DateTime.Parse(@TODAY).AddDays(Int32.Parse("-8"))).ToString("yyyy-MM-dd");
#DECLARE EndDate string = (DateTime.Parse(@TODAY).AddDays(Int32.Parse("-2"))).ToString("yyyy-MM-dd");

// 1-2 days delay for /shares/searchDM/SMLStructuredStreams/SLAPIV11/YYYY/MM/DD/mobile/
#DECLARE Seed string = ((int)DateTime.Now.Ticks).ToString();
#DECLARE IN_NumberLine string = "mm13";  // Changed on 8/26/2022
#DECLARE StreamExpiry string = @"120";
#IF(@InputStartDate != "") 
  #SET StartDate = @InputStartDate;
#ENDIF
#IF(@InputEndDate != "") 
  #SET EndDate = @InputEndDate;
#ENDIF
#DECLARE TaskName string = @JobName + "_" + @EndDate.Replace('-', '_');
#DECLARE Out_SampleForMeasurement string = string.Format("/local/users/v-yangtian/input/{0}.tsv", @JobName);
//#DECLARE AutoMeasurementDir string = "/local/Prod/Image/Prism/Metrics/AutoMeasurement/";
//#DECLARE Out_SampleFile string = string.Format("{0}en/Samples{1}_en.ss", @AutoMeasurementDir, @TaskName);
//#DECLARE Out_Stats      string = string.Format("{0}stats/SamplesStats{1}.ss", @AutoMeasurementDir, @TaskName);
//#IF(@JobName.Contains("Regular"))
//    #IF(@In_Language == "en")
//        #SET Out_Stats =         string.Format("{0}stats/SamplesStats{1}_en.ss", @AutoMeasurementDir, @TaskName);
//    #ELSE
//        #SET Out_Stats =         string.Format("{0}stats/SamplesStats{1}_other.ss", @AutoMeasurementDir, @TaskName);
//    #ENDIF
//#ENDIF
//#IF(EXISTS(@Out_SampleFile))

//LwNodule = SSTREAM @In_LwNodule;

SearchLogPageBingView =
    VIEW @"/shares/searchDM/distrib/released/SLAPI/SearchLogPageView.view"
    PARAMS
    (
        Start = @StartDate,
        End = @EndDate,
        ReturnAbnormalTraffic = false,
        Dataset = "Bing.com,Mobile"
    );

UserHistory =
    SELECT Request_RequestTime.Date AS Date,
           Request_ImpressionGuid AS ImpressionID,
           SessionId AS SessionID,
           Page_Experiments[@IN_NumberLine].Level.ToLower() AS Flight,
           User_Anid AS AnID,
           ClientId AS ClientID,
           User_StableUserId AS StableID,
           User_HasMsIp AS UserType,
           Market AS Market,
           T.Item1 AS RecallPath,
           T.Item2 AS page_url,
           T.Item3 AS image_url,
           T.Item4 AS ItemID,
           T.Item5 AS Event,
           T.Item6 AS Position
     FROM SearchLogPageBingView
    CROSS APPLY GetImageDetails(DataSources) AS T
    WHERE (Page_Name=="Page.Image.Feed") AND NOT User_HasMsIp;
    //AND Page_Experiments[@IN_NumberLine].Level.ToLower() == @FlightID;

 #IF(@In_Language == "zh_chs")
   UserHistory = 
       SELECT * FROM UserHistory WHERE Market == "zh-CN";
 #ELSEIF(@In_Language == "zh_cht")
   UserHistory = 
       SELECT * FROM UserHistory WHERE Market == "zh-TW";
 #ELSE
   UserHistory = 
       SELECT * FROM UserHistory WHERE Market.Substring(0,2) == @In_Language;
 #ENDIF

samplePool =
    SELECT *,
           (double) 1 AS Weight
    FROM UserHistory
    WHERE UserType==false AND Event == @Par_Event;

Sample =
    REDUCE samplePool ALL
    USING TopNReducer(@SampleNumber, "-random", @Seed, "-WeightCol", "Weight");

Sample = SELECT MMRV2.Utility.HashValue.GetHttpUrlHashBase64String(image_url) AS Key,
         MMRV2.Utility.HashValue.GetHttpUrlHashBase64String(page_url) AS PKey,
         *
         FROM Sample;

//Sample_with_title = 
//    SELECT Sample.Key,
//           Sample.PKey,
//           Sample.image_url,
//           Sample.page_url,
//           Sample.Market,
//           Sample.RecallPath,
//           Sample.AnID,
//           LwNodule.TextFeatures__PageTitle AS title 
//    FROM Sample 
//         LEFT JOIN LwNodule
//         ON Sample.Key == LwNodule.Key 
//            AND Sample.PKey == LwNodule.PageKey;
//
////OUTPUT Sample_with_title TO SSTREAM @Out_SampleFile HASH CLUSTERED BY Key SORTED BY Key, PKey WITH STREAMEXPIRY @StreamExpiry;
//
//stats = SELECT "# Samples" AS Item,
//        COUNT(1) AS Value
//        FROM Sample_with_title
//        UNION ALL
//        SELECT
//        "# Samples with title" AS Item,
//        COUNTIF(title != null AND title != "") AS Value
//        FROM Sample_with_title;

//OUTPUT stats TO SSTREAM @Out_Stats WITH STREAMEXPIRY @StreamExpiry;
//
//Sample_with_title =
//    PROCESS Sample_with_title USING Microsoft.SegmentRelevance.ScopeLib.ColumnProcessor("-prune", "Market");
//
//Sample_with_title =
//    SELECT Key, PKey, image_url, page_url, RecallPath, title, COUNT(1) AS occurrence
//    FROM Sample_with_title
//    GROUP BY Key, PKey, image_url, page_url, RecallPath, title;
//
//// Remove recall path when sending to hitapp as we don't need it for the judgement but have it in previous file when we want it for dashboards
//Sample_with_title = 
//    SELECT DISTINCT image_url,
//           page_url,
//           IF(title != null AND title != "", title, "title not found") AS title 
//    FROM Sample_with_title;

OUTPUT Sample TO @Out_SampleForMeasurement WITH STREAMEXPIRY @StreamExpiry USING DefaultTextOutputter(delimiter:'\t', outputHeader:true);



#CS
public static IEnumerable<Tuple<string, string, string, string, string,string>> GetImageDetails(MS.Internal.Bing.DataMining.SearchLogApi.DataSourceList dsl)
{


    var result = new List<Tuple<string, string, string, string, string,string>>();
    var dsl1=dsl.FindElementsWithProperty("T", "D.Top.ImageFeedFeedback");

    foreach (var d in dsl1)
        { //EvtType field logs all the events like save, click, like , Unlike, Dislike, UnDislike, Unsave , seen 
          var engagement=d.GetDataPropertyOrDefault("EvtType","");
          var img=d.FindElementsWithProperty("EvtType",engagement).FindElementsWithProperty("T","D.ImageFeed.Items").FindElementsWithProperty("T","D.ImageFeed.Item");
          //string ItemId,ImageId,pageUrl,imageUrl,height,width,recall;
              if(img.Count>0)
               {  
              foreach (var item in img)
                  { var ItemId= item.GetDataPropertyOrDefault("ItemId", "");
                    var pageUrl = item.GetDataPropertyOrDefault("Purl", "");
                     var imageUrl = item.GetDataPropertyOrDefault("Murl", "");
                     var recall = dsl.FindElementsWithProperty("T", "D.Top.ImageFeed").FindElementsWithProperty("T", "D.ImageFeed.Item").FindElementsWithProperty("ItemId", ItemId)[0].GetDataPropertyOrDefault("TopicSource",""); // get recall path 
                     var position = dsl.FindElementsWithProperty("T", "D.Top.ImageFeed").FindElementsWithProperty("T", "D.ImageFeed.Item").FindElementsWithProperty("ItemId", ItemId)[0].GetDataPropertyOrDefault("Position",""); // get position of image in the 35 fetch 
					 result.Add(Tuple.Create(recall, pageUrl, imageUrl, ItemId, engagement,position));
                }
           }

          }
    
     return result;

}
#ENDCS