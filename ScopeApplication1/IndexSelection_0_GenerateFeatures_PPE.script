REFERENCE @"D:\data\MMCB\MMRV2\ProdCo3C\Image\Binaries\MMRV2.Core.dll";
REFERENCE @"D:\data\MMCB\MMRV2\ProdCo3C\Image\Binaries\MMRV2.Utility.dll";
REFERENCE @"D:\data\MMCB\MMRV2\ProdCo3C\Image\Binaries\MMRV2.ScheduleSelection.dll";
REFERENCE @"D:\data\MMCB\MMRV2\ProdCo3C\Image\Binaries\MMRV2.IndexSelection.dll";
REFERENCE @"D:\data\MMCB\MMRV2\ProdCo3C\Image\Binaries\MMRV2.SnapshotMerger.dll";
RESOURCE @"D:\data\MMCB\MMRV2\ProdCo3C\Image\Binaries\HashValue.dll";
RESOURCE @"D:\data\MMCB\MMRV2\ProdCo3C\Image\Binaries\searchIndexDiscoverySelection.Prod\URLRepositoryV2Snapshots\CMPRK-Prod2-Ch1\tld.txt";
RESOURCE "/local/Prod/Image/Selection/AfterCrawlSelectionV4.3/2022_06_07/NoduleRankFile_Unified_CutOffTable.tsv";

NoduleRank =
    SSTREAM "/local/Prod/Image/Selection/AfterCrawlSelectionV4.3/2022_06_07/NoduleRankFile_Unified.ss";
NoduleRank =
    SELECT *,
           GetDomain(MUrl) AS MDomain;
NoduleRank_Cutoff =
    SELECT Key,
           PKey,
           MUrl,
           PUrl,
           MDomain,
           GetDomain(PUrl) AS PDomain,
           Score,
           AdjustedRank,
           OrgRank,
           Signature,
           DupSignature,
           Language,
           Country
    FROM NoduleRank
    WHERE AdjustedRank >= s_CutoffRank AND AdjustedRank > 0;

// Pinterest Pages
PinterestPages =
    SSTREAM "/local/Prod/Image/Discovery/VNext/PageRank/2022_06_07/PinSourcePageRankFile.ss";

PinterestPages =
    SELECT ConvertHttpsToHttpInMUrl(PUrl) AS PUrl,
           Rank
    FROM PinterestPages
    UNION ALL
    SELECT ConvertHttpToHttpsInMUrl(PUrl) AS PUrl,
           Rank
    FROM PinterestPages;

PinterestPages =
    SELECT PUrl,
           ANY_VALUE(Rank) AS Rank
    GROUP BY PUrl;

PinterestPages =
    SELECT MMRV2.Utility.HashValue.GetHttpUrlHashBase64String(PUrl) AS PKey,
           MAX(Rank) AS RepinCount;

// Pinterest Image Content
[PARTITION = (PARTITIONCOUNT=2000)]
NoduleRank_Cutoff =
    SELECT NoduleRank_Cutoff.*,
           PinterestPages.RepinCount
    FROM NoduleRank_Cutoff
         LEFT JOIN
             PinterestPages
         ON NoduleRank_Cutoff.PKey == PinterestPages.PKey;

Dups =
    SELECT DupSignature,
           COUNT() AS DupCnt,
           COUNTIF(PDomain != "pinterest.com") AS NonPinterestDupCnt,
           MAX(RepinCount) AS RepinCount
    GROUP BY DupSignature;

PinterestDups =
    SELECT DupSignature
    WHERE MDomain == "pinimg.com"
    FROM NoduleRank
    GROUP BY DupSignature;


// Clicked Content
ClickedImage =
    SELECT DISTINCT Key
    FROM
    (
        SSTREAM "/local/Prod/Image/Selection/ClickRepository/ClickBoost/1Y/2022/06/ToKeep_2022-06-04.ss"
    );
ClickedImage =
    SELECT Key,
           true AS Clicked;

NoduleRank_Cutoff =
    SELECT NoduleRank_Cutoff.*,
           (ClickedImage.Clicked ?? false) AS Clicked
    FROM NoduleRank_Cutoff
         LEFT JOIN
             ClickedImage
         ON NoduleRank_Cutoff.Key == ClickedImage.Key;

[PARTITION = (PARTITIONCOUNT=2000)]
NoduleRank =
    SELECT NoduleRank.*,
           (ClickedImage.Clicked ?? false) AS Clicked
    FROM NoduleRank
         LEFT JOIN
             ClickedImage
         ON NoduleRank.Key == ClickedImage.Key;

ClickedDups =
    SELECT DupSignature
    WHERE Clicked
    FROM NoduleRank
    GROUP BY DupSignature;


[PARTITION = (PARTITIONCOUNT=2000)]
NoduleRank_Cutoff =
    SELECT a.Key,
           a.PKey,
           a.MUrl,
           a.PUrl,
           a.MDomain,
           a.PDomain,
           a.Score,
           a.AdjustedRank,
           a.OrgRank,
           a.Signature,
           a.DupSignature,
           a.Language,
           a.Country,
           (a.MDomain == "pinimg.com") AS PinterestImage,
           (c.DupSignature != null) AS HasPinterestContent,
           a.Clicked,
           (d.DupSignature != null) AS HasClickedContent,
           b.DupCnt,
           b.NonPinterestDupCnt,
           b.RepinCount
    FROM NoduleRank_Cutoff AS a
         LEFT JOIN
             Dups AS b
         ON a.DupSignature == b.DupSignature
         LEFT JOIN
             PinterestDups AS c
         ON a.DupSignature == c.DupSignature
         LEFT JOIN
             ClickedDups AS d
         ON a.DupSignature == d.DupSignature;

ActiveIndex =
    VIEW @"/local/Prod/Image/Repository/ActiveDocsCombined/LatestActiveNodulesList.view"
    PARAMS
    (
        SegmentsList = "GenericLatest"
    );

ActiveIndex =
    SELECT MUrlKey AS Key,
           PUrlKey AS PKey,
           MUrl,
           PUrl,
           GetDomain(MUrl) AS MDomain,
           GetDomain(PUrl) AS PDomain,
           Signature,
           Language,
           Country,
           RealxDim AS Width,
           RealyDim AS Height,
           GetAspectRatio(RealyDim, RealxDim) AS AspectRatio;

Attractiveness =
    SELECT ImageKey,
           PageKey,
           GetAttractivenessScore(InjectionData) AS AttractivenessScore

    FROM
    (
        SSTREAM "/shares/SegmentRelevance/SegmentRelevance/ImageRelevance/Features/en-US/ImageAttractiveness/PairwiseDNNModel/AttractiveScoreDUI/AttractivenessScoreInjectionV3_2022_06_06.ss"
    );

Adult =
    SELECT ImageKey,
           PageKey,
           GetAdultScore(InjectionData) AS AdultScore,
           GetRacyScore(InjectionData) AS RacyScore,
           GetGrusomeScore(InjectionData) AS GrusomeScore
    FROM
    (
        SSTREAM "/shares/SegmentRelevance/SegmentRelevance/ImageAdultBlocking/DUIV4/AdultRacy_2022_06_07.ss"
    );

WaterMark =
    SSTREAM "/local/Prod/Image/Prism/BlocklistToNodule/blocklist_by_watermark_2022-06-06.ss";

ActiveIndex =
    SELECT a.Key,
           a.PKey,
           a.MUrl,
           a.PUrl,
           a.MDomain,
           a.PDomain,
           a.Signature,
           IF(a.Language != null, a.Language, b.Language) AS Language,
           IF(a.Country != null, a.Country, b.Country) AS Country,
           a.Width,
           a.Height,
           a.AspectRatio,
           b.Score,
           b.AdjustedRank,
           b.OrgRank,
           b.DupSignature,
           b.PinterestImage,
           b.HasPinterestContent,
           b.Clicked,
           b.HasClickedContent,
           b.DupCnt,
           b.NonPinterestDupCnt,
           b.RepinCount,
           c.AttractivenessScore,
           d.AdultScore,
           d.RacyScore,
           d.GrusomeScore,
           e.WatermarkProbability
    FROM ActiveIndex AS a
         LEFT JOIN
             NoduleRank_Cutoff AS b
         ON a.Key == b.Key AND a.PKey == b.PKey
         LEFT JOIN
             Attractiveness AS c
         ON a.Key == c.ImageKey AND a.PKey == c.PageKey
         LEFT JOIN
             Adult AS d
         ON a.Key == d.ImageKey AND a.PKey == d.PageKey
         LEFT JOIN
             WaterMark AS e
         ON a.Key == e.Key;

OUTPUT
TO SSTREAM "/local/Prod/Image/Prism/2022-06-08/PrismProdRank_0_PPE.ss"
   HASH CLUSTERED BY Key
       SORTED BY Key, PKey;

#CS

public static int GetRacyScore(string data)
{
    return GetAdultScore(data,"8_FR");
}

public static int GetGrusomeScore(string data)
{
    return GetAdultScore(data,"8_FG");
}

public static int GetAdultScore(string data,string targetLabel="8_FA")
{
    var dataList = data.Split('\t');
    try {
        
        for (int i=0; i <dataList.Length;i+=2)
        {
                if(dataList[i] == targetLabel)
                {
                   return Convert.ToInt16(dataList[i+1]);
                }
        }
    }
    catch 
    {
    }
    return 0;
}

public static int GetAttractivenessScore(string data)
{
    var dataList = data.Split('\t');
    try {
        
        for (int i=0; i <dataList.Length;i+=2)
        {
                if(dataList[i] == "8_S")
                {
                   return Convert.ToInt16(dataList[i+1]);
                }
        }
    }
    catch 
    {
    }
    return 0;
}

static double? GetAspectRatio(int? height, int? width)
{
    if (height != null && width != null)
    {
        return Math.Round(1.0*height.Value/width.Value, 1);
    }
    
    else
    {
        return null;
    }
}

public static string ConvertHttpsToHttpInMUrl(string murl)
{
    if (string.IsNullOrEmpty(murl) || murl.Length < 6)
    {
        return murl;
    }
    if (murl.Substring(0, 6).ToLowerInvariant() == "https:")
    {
        return "http" + murl.Substring(5);
    }
    return murl;
}

public static string ConvertHttpToHttpsInMUrl(string murl)
{
    if (string.IsNullOrEmpty(murl) || murl.Length < 5)
    {
        return murl;
    }
    if (murl.Substring(0, 5).ToLowerInvariant() == "http:")
    {
        return "https" + murl.Substring(4);
    }
    return murl;
}

public static string GetDomain(string url)
{
   string domain, host, l1path;
    
    if (MMRV2.ScheduleSelection.Tool.ParseUrl(out domain, out host, out l1path, url)) 
    {
        return domain;
    }
    
    return null;
}

public static int s_CutoffRank = MMRV2.IndexSelection.SelectionUtils.GetCutoffRank(Path.GetFileName("/local/Prod/Image/Selection/AfterCrawlSelectionV4.3/2022_06_07/NoduleRankFile_Unified_CutOffTable.tsv"), long.Parse("60000000000"));
#ENDCS
